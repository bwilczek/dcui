{"version":3,"sources":["LoadingScreen.js","Service.js","ServiceList.js","App.js","serviceWorker.js","index.js"],"names":["LoadingScreen","id","React","Component","Service","data-service","this","props","data","service","image","container_name","status","name","title","onClick","containerAction","bind","ServiceList","state","selectedEnvironment","filterForCurrentEnv","s","environments","includes","selectEnv","e","persist","setState","target","getAttribute","Button","key","data-environment","variant","env","push","ButtonGroup","services","filter","map","console","log","axios","require","App","loading","fetchStatus","get","response","error","action","post","className","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.67e4fd1d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class LoadingScreen extends React.Component {\n  render() {\n    // TODO: make it full screen, blocking the UX\n    return (\n      <div id=\"loading\">Loading...</div>\n    )\n  }\n}\n","import React from 'react';\nimport FontAwesome from 'react-fontawesome'\n\nexport default class Service extends React.Component {\n  render() {\n    return (\n      <tr data-service={this.props.data.service}>\n        <td>{this.props.data.service}</td>\n        <td>{this.props.data.image}</td>\n        <td>{this.props.data.container_name}</td>\n        <td>{this.props.data.status}</td>\n        <td>\n          <FontAwesome name=\"play\" title=\"Start\" onClick={this.props.containerAction.bind(this, 'start', this.props.data.service)}/>\n          <FontAwesome name=\"stop\" title=\"Stop\" onClick={this.props.containerAction.bind(this, 'stop', this.props.data.service)}/>\n        </td>\n      </tr>\n    )\n  }\n}\n","import React from 'react';\nimport Service from './Service'\nimport { Button, ButtonGroup } from 'react-bootstrap';\n\nexport default class ServiceList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedEnvironment: '__all'\n    };\n  }\n\n  render() {\n    const filterForCurrentEnv = (s) => {\n      if(this.state.selectedEnvironment === '__all') {\n        return true;\n      }\n      return this.props.environments[this.state.selectedEnvironment].includes(s.service)\n    }\n\n    const selectEnv = (e) => {\n      e.persist();\n      this.setState(state => (\n        {...state, selectedEnvironment: e.target.getAttribute('data-environment')}\n      ))\n    }\n\n    const startAll = (e) => {\n      console.log(\"Starting:\",this.props.services.filter(filterForCurrentEnv).map(s => s.service));\n    }\n\n    const stopAll = (e) => {\n      console.log(\"Stopping:\",this.props.services.filter(filterForCurrentEnv).map(s => s.service));\n    }\n\n    const environments = [\n      <Button key='__all' data-environment='__all' variant=\"light\" onClick={(e) => this.setState(state => ({...state, selectedEnvironment: '__all'}))}>ALL</Button>\n    ];\n    // FIXME: .keys() is not defined for this.props.environments\n    for(let env in this.props.environments) {\n      environments.push(<Button key={env} data-environment={env} variant=\"light\" onClick={selectEnv}>{env}</Button>)\n    }\n\n    return (\n      <div>\n        <ButtonGroup>{environments}</ButtonGroup>\n        <table>\n          <thead>\n            <tr>\n              <th>Service</th>\n              <th>Image</th>\n              <th>Container</th>\n              <th>Status</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.services.filter(filterForCurrentEnv).map(s => <Service key={s.service} data={s} containerAction={this.props.containerAction}/>)}\n          </tbody>\n        </table>\n        <ButtonGroup>\n          <Button onClick={startAll}>Start services</Button>\n          <Button onClick={stopAll}>Stop services</Button>\n        </ButtonGroup>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoadingScreen from './LoadingScreen';\nimport ServiceList from './ServiceList';\nconst axios = require('axios')\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      status: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchStatus()\n  }\n\n  async fetchStatus() {\n    try {\n      this.setState(state => ({...state, loading: true}))\n      const response = await axios.get('/api/status');\n      this.setState(state => ({...state, loading: false, status: response.data}))\n    } catch (error) {\n      this.setState(state => ({...state, loading: false}))\n      console.error(error);\n    }\n  }\n\n  async containerAction(action, service) {\n    try {\n      this.setState(state => ({...state, loading: true}))\n      await axios.post(`/api/container/${service}/${action}`);\n      this.fetchStatus();\n    } catch (error) {\n      this.setState(state => ({...state, loading: false}))\n      console.error(error);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\n        { this.state.loading ? <LoadingScreen /> : <ServiceList services={this.state.status.services} environments={this.state.status.environments} containerAction={this.containerAction.bind(this)}/> }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}